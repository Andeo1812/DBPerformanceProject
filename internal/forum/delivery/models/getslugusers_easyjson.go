// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC1b6218bDecodeDbPerformanceProjectInternalForumDeliveryModels(in *jlexer.Lexer, out *UsersList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(UsersList, 0, 1)
			} else {
				*out = UsersList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 ForumGetSlugUsersResponse
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1b6218bEncodeDbPerformanceProjectInternalForumDeliveryModels(out *jwriter.Writer, in UsersList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v UsersList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1b6218bEncodeDbPerformanceProjectInternalForumDeliveryModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UsersList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1b6218bEncodeDbPerformanceProjectInternalForumDeliveryModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UsersList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1b6218bDecodeDbPerformanceProjectInternalForumDeliveryModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UsersList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1b6218bDecodeDbPerformanceProjectInternalForumDeliveryModels(l, v)
}
func easyjsonC1b6218bDecodeDbPerformanceProjectInternalForumDeliveryModels1(in *jlexer.Lexer, out *ForumGetSlugUsersResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nickname":
			out.Nickname = string(in.String())
		case "fullname":
			out.FullName = string(in.String())
		case "about":
			out.About = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1b6218bEncodeDbPerformanceProjectInternalForumDeliveryModels1(out *jwriter.Writer, in ForumGetSlugUsersResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nickname\":"
		out.RawString(prefix[1:])
		out.String(string(in.Nickname))
	}
	{
		const prefix string = ",\"fullname\":"
		out.RawString(prefix)
		out.String(string(in.FullName))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ForumGetSlugUsersResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1b6218bEncodeDbPerformanceProjectInternalForumDeliveryModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ForumGetSlugUsersResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1b6218bEncodeDbPerformanceProjectInternalForumDeliveryModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ForumGetSlugUsersResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1b6218bDecodeDbPerformanceProjectInternalForumDeliveryModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ForumGetSlugUsersResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1b6218bDecodeDbPerformanceProjectInternalForumDeliveryModels1(l, v)
}
