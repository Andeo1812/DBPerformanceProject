// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5c9b8afcDecodeDbPerformanceProjectInternalPostDeliveryModels(in *jlexer.Lexer, out *PostGetDetailsThreadResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "author":
			out.Author = string(in.String())
		case "forum":
			out.Forum = string(in.String())
		case "slug":
			out.Slug = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "created":
			out.Created = string(in.String())
		case "votes":
			out.Votes = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5c9b8afcEncodeDbPerformanceProjectInternalPostDeliveryModels(out *jwriter.Writer, in PostGetDetailsThreadResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"forum\":"
		out.RawString(prefix)
		out.String(string(in.Forum))
	}
	{
		const prefix string = ",\"slug\":"
		out.RawString(prefix)
		out.String(string(in.Slug))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.String(string(in.Created))
	}
	{
		const prefix string = ",\"votes\":"
		out.RawString(prefix)
		out.Int64(int64(in.Votes))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostGetDetailsThreadResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5c9b8afcEncodeDbPerformanceProjectInternalPostDeliveryModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostGetDetailsThreadResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5c9b8afcEncodeDbPerformanceProjectInternalPostDeliveryModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostGetDetailsThreadResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5c9b8afcDecodeDbPerformanceProjectInternalPostDeliveryModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostGetDetailsThreadResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5c9b8afcDecodeDbPerformanceProjectInternalPostDeliveryModels(l, v)
}
func easyjson5c9b8afcDecodeDbPerformanceProjectInternalPostDeliveryModels1(in *jlexer.Lexer, out *PostGetDetailsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "post":
			(out.Post).UnmarshalEasyJSON(in)
		case "thread":
			(out.Thread).UnmarshalEasyJSON(in)
		case "author":
			(out.Author).UnmarshalEasyJSON(in)
		case "forum":
			(out.Forum).UnmarshalEasyJSON(in)
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5c9b8afcEncodeDbPerformanceProjectInternalPostDeliveryModels1(out *jwriter.Writer, in PostGetDetailsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"post\":"
		out.RawString(prefix[1:])
		(in.Post).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"thread\":"
		out.RawString(prefix)
		(in.Thread).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		(in.Author).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"forum\":"
		out.RawString(prefix)
		(in.Forum).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostGetDetailsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5c9b8afcEncodeDbPerformanceProjectInternalPostDeliveryModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostGetDetailsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5c9b8afcEncodeDbPerformanceProjectInternalPostDeliveryModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostGetDetailsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5c9b8afcDecodeDbPerformanceProjectInternalPostDeliveryModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostGetDetailsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5c9b8afcDecodeDbPerformanceProjectInternalPostDeliveryModels1(l, v)
}
func easyjson5c9b8afcDecodeDbPerformanceProjectInternalPostDeliveryModels2(in *jlexer.Lexer, out *PostGetDetailsPostResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "parent":
			out.Parent = int64(in.Int64())
		case "author":
			out.Author = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "isEdited":
			out.IsEdited = bool(in.Bool())
		case "forum":
			out.Forum = string(in.String())
		case "thread":
			out.Thread = int64(in.Int64())
		case "created":
			out.Created = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5c9b8afcEncodeDbPerformanceProjectInternalPostDeliveryModels2(out *jwriter.Writer, in PostGetDetailsPostResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"parent\":"
		out.RawString(prefix)
		out.Int64(int64(in.Parent))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"isEdited\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsEdited))
	}
	{
		const prefix string = ",\"forum\":"
		out.RawString(prefix)
		out.String(string(in.Forum))
	}
	{
		const prefix string = ",\"thread\":"
		out.RawString(prefix)
		out.Int64(int64(in.Thread))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.String(string(in.Created))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostGetDetailsPostResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5c9b8afcEncodeDbPerformanceProjectInternalPostDeliveryModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostGetDetailsPostResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5c9b8afcEncodeDbPerformanceProjectInternalPostDeliveryModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostGetDetailsPostResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5c9b8afcDecodeDbPerformanceProjectInternalPostDeliveryModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostGetDetailsPostResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5c9b8afcDecodeDbPerformanceProjectInternalPostDeliveryModels2(l, v)
}
func easyjson5c9b8afcDecodeDbPerformanceProjectInternalPostDeliveryModels3(in *jlexer.Lexer, out *PostGetDetailsForumResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "user":
			out.User = string(in.String())
		case "slug":
			out.Slug = string(in.String())
		case "posts":
			out.Posts = int64(in.Int64())
		case "threads":
			out.Threads = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5c9b8afcEncodeDbPerformanceProjectInternalPostDeliveryModels3(out *jwriter.Writer, in PostGetDetailsForumResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"slug\":"
		out.RawString(prefix)
		out.String(string(in.Slug))
	}
	{
		const prefix string = ",\"posts\":"
		out.RawString(prefix)
		out.Int64(int64(in.Posts))
	}
	{
		const prefix string = ",\"threads\":"
		out.RawString(prefix)
		out.Int64(int64(in.Threads))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostGetDetailsForumResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5c9b8afcEncodeDbPerformanceProjectInternalPostDeliveryModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostGetDetailsForumResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5c9b8afcEncodeDbPerformanceProjectInternalPostDeliveryModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostGetDetailsForumResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5c9b8afcDecodeDbPerformanceProjectInternalPostDeliveryModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostGetDetailsForumResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5c9b8afcDecodeDbPerformanceProjectInternalPostDeliveryModels3(l, v)
}
func easyjson5c9b8afcDecodeDbPerformanceProjectInternalPostDeliveryModels4(in *jlexer.Lexer, out *PostGetDetailsAuthorResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nickname":
			out.Nickname = string(in.String())
		case "fullname":
			out.FullName = string(in.String())
		case "about":
			out.About = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5c9b8afcEncodeDbPerformanceProjectInternalPostDeliveryModels4(out *jwriter.Writer, in PostGetDetailsAuthorResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nickname\":"
		out.RawString(prefix[1:])
		out.String(string(in.Nickname))
	}
	{
		const prefix string = ",\"fullname\":"
		out.RawString(prefix)
		out.String(string(in.FullName))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostGetDetailsAuthorResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5c9b8afcEncodeDbPerformanceProjectInternalPostDeliveryModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostGetDetailsAuthorResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5c9b8afcEncodeDbPerformanceProjectInternalPostDeliveryModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostGetDetailsAuthorResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5c9b8afcDecodeDbPerformanceProjectInternalPostDeliveryModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostGetDetailsAuthorResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5c9b8afcDecodeDbPerformanceProjectInternalPostDeliveryModels4(l, v)
}
